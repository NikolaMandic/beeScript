###
this is the interface for any beeScript compiler to be     
this interface is to be given to the parser generated by beeScript.jison as yy object of the parser     
`    parser.yy`    
after that methods are called as file is parsed
methods of Compiler class are actions of more important productions   
in the parser.     
For example:     
`    arg : expr{ yy.argFound($1); } ;`    
TODO     
there may be some missing from here that are in the parser   
and some from here may never get called    
this is dev version
###
init= ()->
  class Compiler
    methodDeff: (name) ->
      console.log('method def '+ name)
    argDFound:(arg)->
      console.log('')
    methodDeff: (name) ->
      console.log('')
    argDFound:(arg)->
      console.log('')
    condition:(term)->
      console.log('')
    startWhileExpr:()->
    opFound:(op)->
    assignment: (place ,val) ->
      console.log('method call %s', name)
    methodCall: (name) ->
      console.log('method call %s', name)
    methodEnd: (name) ->
      console.log('method call %s', name)
    identFound: (name) ->
      console.log('ident found %s',name)
    termExprFound: (name) ->
      console.log('term found %s', name)
      name
    accessor: (name) ->
      console.log('accessor found %s', name)
    plus: () ->
      console.log('+ found')
    minus: () ->
      console.log('- found')
    div: () ->
      console.log('/ found')
    mul: () ->
      console.log('* found')
    newIdent: (name) ->
      console.log 'new Identifier %s', name
    eq: () ->
      console.log 'eq found'
    startWhile: ()->
      console.log 'start while'
    endWhile: ()->
      console.log 'end while'
    condition: () ->
      console.log 'condtion found'
    assignment: () ->
      console.log 'assignment'
    startIf:()->
      console.log 'start if'
    endIf:()->
      console.log 'end if'
    startElse:()->
      console.log 'start else'
    endElse:()->
      console.log 'end else'
    this
  return Compiler
if module
  module.exports=init()
else
  define [], init
