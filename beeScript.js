/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var beeScript = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"e":4,"EOF":5,"NEWLINE":6,"accessorList":7,"DDOT":8,"IDENT":9,"DOT":10,"fieldAccess":11,"id":12,"statementList":13,"statement":14,"end":15,"expressionStatement":16,"ifs":17,"whiles":18,"ife":19,"ms":20,"(":21,")":22,"bs":23,"argListD":24,"fa":25,"argList":26,"S":27,"cmdL":28,"IDENTI":29,"CMD":30,"DEF":31,"fA":32,"argL":33,"expr":34,"ANY":35,"expList":36,"assignment":37,"whkw":38,"expSList":39,"whileStart":40,"WHILE":41,"sep":42,"condition":43,"funcSig":44,"IF":45,"ifStatementsStart":46,"ELSE":47,"elseStatementsStart":48,"cop":49,"arg":50,"==":51,"!=":52,"&&":53,"||":54,"<":55,">":56,"argCommaList":57,",":58,"argD":59,"argCommaListD":60,"EQ":61,"pm":62,"dm":63,"pmop":64,"term":65,"dmop":66,"+":67,"-":68,"/":69,"*":70,"STRING":71,"HDRESS":72,"NUMBER":73,"$accept":0,"$end":1},
terminals_: {2:"error",4:"e",5:"EOF",6:"NEWLINE",8:"DDOT",9:"IDENT",10:"DOT",21:"(",22:")",25:"fa",27:"S",29:"IDENTI",30:"CMD",31:"DEF",35:"ANY",41:"WHILE",45:"IF",47:"ELSE",51:"==",52:"!=",53:"&&",54:"||",55:"<",56:">",58:",",61:"EQ",67:"+",68:"-",69:"/",70:"*",71:"STRING",72:"HDRESS",73:"NUMBER"},
productions_: [0,[3,2],[3,3],[7,3],[7,2],[7,3],[7,2],[11,2],[12,1],[13,2],[13,3],[15,1],[15,1],[14,1],[14,1],[14,1],[14,1],[14,5],[14,6],[14,7],[14,6],[14,2],[14,2],[28,1],[28,1],[28,2],[28,2],[20,2],[32,3],[32,2],[23,1],[33,3],[33,1],[16,1],[16,1],[18,4],[38,1],[40,1],[39,3],[39,1],[42,1],[44,3],[44,4],[17,4],[46,1],[19,4],[48,1],[43,1],[43,3],[50,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[26,1],[26,2],[57,2],[57,3],[24,1],[24,2],[60,2],[60,3],[59,1],[37,3],[37,3],[34,1],[62,3],[62,1],[63,3],[63,1],[64,1],[64,1],[66,1],[66,1],[36,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 2:return 'newline'; 
break;
case 3: yy.accessorD($$[$0]); 
break;
case 4: yy.accessorD($$[$0]); 
break;
case 5:yy.accessor($$[$0]);
break;
case 6: yy.accessor($$[$0]);
break;
case 7: 
  if($$[$0-1]==='memory'){
    this.$='memory'
  }else{
    this.$ = 'field'
  }
  yy.fieldAccess($$[$0-1],this.$)

break;
case 8: this.$ = $$[$0]; yy.identFound($$[$0]); 
break;
case 17: yy.methodEnd(); 
break;
case 18: yy.methodEnd(); 
break;
case 19: yy.methodEnd(); 
break;
case 20: yy.methodEnd(); 
break;
case 21: yy.methodCall($$[$0-1]); 
break;
case 22:yy.sendCMD($$[$0])
break;
case 23:this.$=yy.addIDENTI($$[$0])
break;
case 24:this.$=yy.addCMD($$[$0])
break;
case 25:this.$=yy.addIDENTI($$[$0])
break;
case 26:this.$=yy.addCMD($$[$0])
break;
case 27: yy.methodDeff($$[$0]);
break;
case 35: yy.endWhile();
break;
case 36:yy.startWhileExpr();
break;
case 37: yy.startWhile(); 
break;
case 43: yy.endIf() 
break;
case 44: yy.startIf() 
break;
case 45: yy.endElse(); 
break;
case 46:yy.startElse(); 
break;
case 47: yy.condition($$[$0]) 
break;
case 49: yy.argFound($$[$0]); 
break;
case 64:yy.argDFound($$[$0]);
break;
case 65: yy.assignment($$[$0-2],$$[$0]) 
break;
case 66: yy.assignment($$[$0-2],$$[$0]) 
break;
case 68: yy.opFound($$[$0-1])
break;
case 70: yy.opFound($$[$0-1]) 
break;
case 71:this.$=$$[$0]; yy.termExprFound($$[$0])
break;
case 72:this.$=yy.plus
break;
case 73:this.$=yy.minus
break;
case 74:this.$=yy.div
break;
case 75:this.$=yy.mul
break;
case 77: this.$={ type:'string',
               val: yytext
             }
           //  yy.stringtermfound(yytext);

break;
case 78: yy.methodCall($$[$0]); 
break;
case 79: this.$={ type:'hdress',
               val: yytext
               }
           //  yy.hdresstermfound(yytext);


break;
case 80: this.$={ type:'id',
               val: $$[$0]
              }

            // yy.idtermfound($$[$0]);

break;
case 81: this.$={ type:'num',
               val: $$[$0]
               }

            // yy.numbertermfound($$[$0]);

break;
case 82: this.$={ type:'faccess',
               val: $$[$0]
               }

            // yy.fatermfound($$[$0]);

break;
}
},
table: [{9:[1,8],11:15,12:16,13:1,14:2,16:3,17:4,18:5,19:6,20:7,27:[1,9],31:[1,14],34:11,37:10,38:13,41:[1,18],44:22,45:[1,12],62:17,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{1:[3]},{5:[1,27],6:[1,26],15:25},{5:[2,13],6:[2,13]},{5:[2,14],6:[2,14],47:[1,28]},{5:[2,15],6:[2,15]},{5:[2,16],6:[2,16]},{21:[1,29],25:[1,30]},{5:[2,8],6:[2,8],8:[2,8],9:[1,37],10:[2,8],11:36,12:35,21:[1,32],26:31,34:34,44:22,50:33,61:[2,8],62:17,63:19,65:20,67:[2,8],68:[2,8],69:[2,8],70:[2,8],71:[1,21],72:[1,23],73:[1,24]},{28:38,29:[1,39],30:[1,40]},{5:[2,33],6:[2,33]},{5:[2,34],6:[2,34]},{9:[1,37],11:36,12:35,36:42,43:41,44:22,62:43,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{9:[1,37],11:36,12:35,36:42,39:44,43:45,44:22,62:43,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{9:[1,46]},{5:[2,82],6:[2,82],61:[1,47],67:[2,82],68:[2,82],69:[2,82],70:[2,82]},{5:[2,80],6:[2,80],7:49,8:[1,50],10:[1,51],61:[1,48],67:[2,80],68:[2,80],69:[2,80],70:[2,80]},{5:[2,67],6:[2,67],22:[2,67],58:[2,67]},{9:[2,36],71:[2,36],72:[2,36],73:[2,36]},{5:[2,69],6:[2,69],22:[2,69],35:[2,69],51:[2,69],52:[2,69],53:[2,69],54:[2,69],55:[2,69],56:[2,69],58:[2,69],64:52,67:[1,53],68:[1,54]},{5:[2,71],6:[2,71],22:[2,71],35:[2,71],51:[2,71],52:[2,71],53:[2,71],54:[2,71],55:[2,71],56:[2,71],58:[2,71],66:55,67:[2,71],68:[2,71],69:[1,56],70:[1,57]},{5:[2,77],6:[2,77],22:[2,77],35:[2,77],51:[2,77],52:[2,77],53:[2,77],54:[2,77],55:[2,77],56:[2,77],58:[2,77],67:[2,77],68:[2,77],69:[2,77],70:[2,77]},{5:[2,78],6:[2,78],22:[2,78],35:[2,78],51:[2,78],52:[2,78],53:[2,78],54:[2,78],55:[2,78],56:[2,78],58:[2,78],67:[2,78],68:[2,78],69:[2,78],70:[2,78]},{5:[2,79],6:[2,79],22:[2,79],35:[2,79],51:[2,79],52:[2,79],53:[2,79],54:[2,79],55:[2,79],56:[2,79],58:[2,79],67:[2,79],68:[2,79],69:[2,79],70:[2,79]},{5:[2,81],6:[2,81],22:[2,81],35:[2,81],51:[2,81],52:[2,81],53:[2,81],54:[2,81],55:[2,81],56:[2,81],58:[2,81],67:[2,81],68:[2,81],69:[2,81],70:[2,81]},{1:[2,9],5:[2,9],6:[2,9],47:[2,9]},{1:[2,11],5:[2,11],6:[2,11],9:[1,8],11:15,12:16,13:58,14:2,16:3,17:4,18:5,19:6,20:7,27:[1,9],31:[1,14],34:11,37:10,38:13,41:[1,18],44:22,45:[1,12],47:[2,11],62:17,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{1:[2,12],5:[2,12],6:[2,12],47:[2,12]},{6:[1,60],48:59},{9:[1,64],22:[1,61],24:62,59:63},{21:[1,65]},{5:[2,21],6:[2,21]},{9:[1,37],11:36,12:35,22:[1,66],26:67,34:34,44:22,50:33,62:17,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{5:[2,56],6:[2,56],22:[2,56],57:68,58:[1,69]},{5:[2,49],6:[2,49],22:[2,49],58:[2,49]},{5:[2,80],6:[2,80],7:49,8:[1,50],10:[1,51],22:[2,80],35:[2,80],51:[2,80],52:[2,80],53:[2,80],54:[2,80],55:[2,80],56:[2,80],58:[2,80],67:[2,80],68:[2,80],69:[2,80],70:[2,80]},{5:[2,82],6:[2,82],22:[2,82],35:[2,82],51:[2,82],52:[2,82],53:[2,82],54:[2,82],55:[2,82],56:[2,82],58:[2,82],67:[2,82],68:[2,82],69:[2,82],70:[2,82]},{5:[2,8],6:[2,8],8:[2,8],10:[2,8],21:[1,32],22:[2,8],35:[2,8],51:[2,8],52:[2,8],53:[2,8],54:[2,8],55:[2,8],56:[2,8],58:[2,8],67:[2,8],68:[2,8],69:[2,8],70:[2,8]},{5:[2,22],6:[2,22],29:[1,70],30:[1,71]},{5:[2,23],6:[2,23],29:[2,23],30:[2,23]},{5:[2,24],6:[2,24],29:[2,24],30:[2,24]},{6:[1,73],46:72},{6:[2,47],35:[2,47],49:74,51:[1,75],52:[1,76],53:[1,77],54:[1,78],55:[1,79],56:[1,80]},{6:[2,76],35:[2,76],51:[2,76],52:[2,76],53:[2,76],54:[2,76],55:[2,76],56:[2,76]},{6:[1,83],35:[1,84],40:81,42:82},{6:[2,39],35:[2,39]},{21:[2,27],25:[2,27]},{9:[1,37],11:36,12:35,34:85,44:22,62:17,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{9:[1,37],11:36,12:35,34:86,44:22,62:17,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{5:[2,7],6:[2,7],8:[1,87],10:[1,88],22:[2,7],35:[2,7],51:[2,7],52:[2,7],53:[2,7],54:[2,7],55:[2,7],56:[2,7],58:[2,7],61:[2,7],67:[2,7],68:[2,7],69:[2,7],70:[2,7]},{9:[1,89]},{9:[1,90]},{9:[1,37],11:36,12:35,44:22,62:91,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{9:[2,72],71:[2,72],72:[2,72],73:[2,72]},{9:[2,73],71:[2,73],72:[2,73],73:[2,73]},{9:[1,37],11:36,12:35,44:22,63:92,65:20,71:[1,21],72:[1,23],73:[1,24]},{9:[2,74],71:[2,74],72:[2,74],73:[2,74]},{9:[2,75],71:[2,75],72:[2,75],73:[2,75]},{1:[2,10],5:[2,10],6:[2,10],47:[2,10]},{9:[1,8],11:15,12:16,13:93,14:2,16:3,17:4,18:5,19:6,20:7,27:[1,9],31:[1,14],34:11,37:10,38:13,41:[1,18],44:22,45:[1,12],62:17,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{9:[2,46],27:[2,46],31:[2,46],41:[2,46],45:[2,46],71:[2,46],72:[2,46],73:[2,46]},{6:[1,95],23:94},{22:[1,96]},{22:[2,60],58:[1,98],60:97},{22:[2,64],58:[2,64]},{9:[1,64],22:[1,100],24:99,59:63},{5:[2,41],6:[2,41],22:[2,41],35:[2,41],51:[2,41],52:[2,41],53:[2,41],54:[2,41],55:[2,41],56:[2,41],58:[2,41],67:[2,41],68:[2,41],69:[2,41],70:[2,41]},{22:[1,101]},{5:[2,57],6:[2,57],22:[2,57]},{9:[1,37],11:36,12:35,34:34,44:22,50:102,62:17,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{5:[2,25],6:[2,25],29:[2,25],30:[2,25]},{5:[2,26],6:[2,26],29:[2,26],30:[2,26]},{9:[1,8],11:15,12:16,13:103,14:2,16:3,17:4,18:5,19:6,20:7,27:[1,9],31:[1,14],34:11,37:10,38:13,41:[1,18],44:22,45:[1,12],62:17,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{9:[2,44],27:[2,44],31:[2,44],41:[2,44],45:[2,44],71:[2,44],72:[2,44],73:[2,44]},{9:[1,37],11:36,12:35,36:104,44:22,62:43,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{9:[2,50],71:[2,50],72:[2,50],73:[2,50]},{9:[2,51],71:[2,51],72:[2,51],73:[2,51]},{9:[2,52],71:[2,52],72:[2,52],73:[2,52]},{9:[2,53],71:[2,53],72:[2,53],73:[2,53]},{9:[2,54],71:[2,54],72:[2,54],73:[2,54]},{9:[2,55],71:[2,55],72:[2,55],73:[2,55]},{9:[1,8],11:15,12:16,13:105,14:2,16:3,17:4,18:5,19:6,20:7,27:[1,9],31:[1,14],34:11,37:10,38:13,41:[1,18],44:22,45:[1,12],62:17,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{9:[1,37],11:36,12:35,36:106,44:22,62:43,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{9:[2,37],27:[2,37],31:[2,37],41:[2,37],45:[2,37],71:[2,37],72:[2,37],73:[2,37]},{9:[2,40],71:[2,40],72:[2,40],73:[2,40]},{5:[2,65],6:[2,65]},{5:[2,66],6:[2,66]},{9:[1,107]},{9:[1,108]},{5:[2,4],6:[2,4],8:[2,4],10:[2,4],22:[2,4],35:[2,4],51:[2,4],52:[2,4],53:[2,4],54:[2,4],55:[2,4],56:[2,4],58:[2,4],61:[2,4],67:[2,4],68:[2,4],69:[2,4],70:[2,4]},{5:[2,6],6:[2,6],8:[2,6],10:[2,6],22:[2,6],35:[2,6],51:[2,6],52:[2,6],53:[2,6],54:[2,6],55:[2,6],56:[2,6],58:[2,6],61:[2,6],67:[2,6],68:[2,6],69:[2,6],70:[2,6]},{5:[2,68],6:[2,68],22:[2,68],35:[2,68],51:[2,68],52:[2,68],53:[2,68],54:[2,68],55:[2,68],56:[2,68],58:[2,68]},{5:[2,70],6:[2,70],22:[2,70],35:[2,70],51:[2,70],52:[2,70],53:[2,70],54:[2,70],55:[2,70],56:[2,70],58:[2,70],67:[2,70],68:[2,70]},{5:[2,45],6:[2,45]},{9:[1,8],11:15,12:16,13:109,14:2,16:3,17:4,18:5,19:6,20:7,27:[1,9],31:[1,14],34:11,37:10,38:13,41:[1,18],44:22,45:[1,12],62:17,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{9:[2,30],27:[2,30],31:[2,30],41:[2,30],45:[2,30],71:[2,30],72:[2,30],73:[2,30]},{6:[1,95],23:110},{22:[2,61]},{9:[1,64],59:111},{22:[1,112]},{6:[1,95],23:113},{5:[2,42],6:[2,42],22:[2,42],35:[2,42],51:[2,42],52:[2,42],53:[2,42],54:[2,42],55:[2,42],56:[2,42],58:[2,42],67:[2,42],68:[2,42],69:[2,42],70:[2,42]},{5:[2,58],6:[2,58],22:[2,58],57:114,58:[1,69]},{5:[2,43],6:[2,43],47:[2,43]},{6:[2,48],35:[2,48]},{5:[2,35],6:[2,35]},{6:[2,38],35:[2,38]},{5:[2,3],6:[2,3],8:[2,3],10:[2,3],22:[2,3],35:[2,3],51:[2,3],52:[2,3],53:[2,3],54:[2,3],55:[2,3],56:[2,3],58:[2,3],61:[2,3],67:[2,3],68:[2,3],69:[2,3],70:[2,3]},{5:[2,5],6:[2,5],8:[2,5],10:[2,5],22:[2,5],35:[2,5],51:[2,5],52:[2,5],53:[2,5],54:[2,5],55:[2,5],56:[2,5],58:[2,5],61:[2,5],67:[2,5],68:[2,5],69:[2,5],70:[2,5]},{5:[2,17],6:[2,17]},{9:[1,8],11:15,12:16,13:115,14:2,16:3,17:4,18:5,19:6,20:7,27:[1,9],31:[1,14],34:11,37:10,38:13,41:[1,18],44:22,45:[1,12],62:17,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{22:[2,62],58:[1,98],60:116},{6:[1,95],23:117},{9:[1,8],11:15,12:16,13:118,14:2,16:3,17:4,18:5,19:6,20:7,27:[1,9],31:[1,14],34:11,37:10,38:13,41:[1,18],44:22,45:[1,12],62:17,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{5:[2,59],6:[2,59],22:[2,59]},{5:[2,18],6:[2,18]},{22:[2,63]},{9:[1,8],11:15,12:16,13:119,14:2,16:3,17:4,18:5,19:6,20:7,27:[1,9],31:[1,14],34:11,37:10,38:13,41:[1,18],44:22,45:[1,12],62:17,63:19,65:20,71:[1,21],72:[1,23],73:[1,24]},{5:[2,20],6:[2,20]},{5:[2,19],6:[2,19]}],
defaultActions: {97:[2,61],116:[2,63]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

if (typeof module === "undefined" ||  module === null) {
define(function(){
return beeScript
});
}
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "IDENTI";
break;
case 1:return "CMD";  
break;
case 2:
this.begin('INITIAL');

break;
case 3:/* skip whitespace */
break;
case 4:return 73
break;
case 5:return 6
break;
case 6:return 6
break;
case 7:return 6
break;
case 8:return 41
break;
case 9:return "REGS"
break;
case 10:
  this.begin('smode');
  return "S";

break;
case 11:return 8
break;
case 12:return 10
break;
case 13:return 54
break;
case 14:return 53
break;
case 15:return 58
break;
case 16:return 51
break;
case 17:return 52
break;
case 18:return 61
break;
case 19:return 70
break;
case 20:return 69
break;
case 21:return 68
break;
case 22:return 67
break;
case 23:return 58
break;
case 24:return 56
break;
case 25:return 55
break;
case 26:return '^'
break;
case 27:return 21
break;
case 28:return 45
break;
case 29:return 47
break;
case 30:return 22
break;
case 31:return 'PI'
break;
case 32:return 'E'
break;
case 33:return "HDRESS"
break;
case 34:
 return 31

break;
case 35:return 71
break;
case 36:return "IDENT"
break;
case 37:return 5
break;
case 38:return 35
break;
}
},
rules: [/^(?:#\w+[ ]+)/,/^(?:[^#]+)/,/^(?:\n)/,/^(?:[ ]+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:\n)/,/^(?:\r)/,/^(?:\rc\b)/,/^(?:while\b)/,/^(?:registers\b)/,/^(?:s\b)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:,)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:,)/,/^(?:>)/,/^(?:<)/,/^(?:\^)/,/^(?:\()/,/^(?:if\b)/,/^(?:else\b)/,/^(?:\))/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:0x\w+)/,/^(?:def\b)/,/^(?:'[^"]+')/,/^(?:\w+)/,/^(?:$)/,/^(?:.)/],
conditions: {"smode":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"inclusive":true},"INITIAL":{"rules":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = beeScript;
exports.Parser = beeScript.Parser;
exports.parse = function () { return beeScript.parse.apply(beeScript, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}