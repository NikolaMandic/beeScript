// Generated by CoffeeScript 1.6.3
/*
this is the interface for any beeScript compiler to be     
this interface is to be given to the parser generated by beeScript.jison as yy object of the parser     
`    parser.yy`    
after that methods are called as file is parsed
methods of Compiler class are actions of more important productions   
in the parser.     
For example:     
`    arg : expr{ yy.argFound($1); } ;`    
TODO     
there may be some missing from here that are in the parser   
and some from here may never get called    
this is dev version
*/


(function() {
  var init;

  init = function() {
    var Compiler;
    Compiler = (function() {
      function Compiler() {}

      Compiler.prototype.methodDeff = function(name) {
        return console.log('method def ' + name);
      };

      Compiler.prototype.argDFound = function(arg) {
        return console.log('');
      };

      Compiler.prototype.methodDeff = function(name) {
        return console.log('');
      };

      Compiler.prototype.argDFound = function(arg) {
        return console.log('');
      };

      Compiler.prototype.condition = function(term) {
        return console.log('');
      };

      Compiler.prototype.startWhileExpr = function() {};

      Compiler.prototype.opFound = function(op) {};

      Compiler.prototype.assignment = function(place, val) {
        return console.log('method call %s', name);
      };

      Compiler.prototype.methodCall = function(name) {
        return console.log('method call %s', name);
      };

      Compiler.prototype.methodEnd = function(name) {
        return console.log('method call %s', name);
      };

      Compiler.prototype.identFound = function(name) {
        return console.log('ident found %s', name);
      };

      Compiler.prototype.termExprFound = function(name) {
        console.log('term found %s', name);
        return name;
      };

      Compiler.prototype.accessor = function(name) {
        return console.log('accessor found %s', name);
      };

      Compiler.prototype.plus = function() {
        return console.log('+ found');
      };

      Compiler.prototype.minus = function() {
        return console.log('- found');
      };

      Compiler.prototype.div = function() {
        return console.log('/ found');
      };

      Compiler.prototype.mul = function() {
        return console.log('* found');
      };

      Compiler.prototype.newIdent = function(name) {
        return console.log('new Identifier %s', name);
      };

      Compiler.prototype.eq = function() {
        return console.log('eq found');
      };

      Compiler.prototype.startWhile = function() {
        return console.log('start while');
      };

      Compiler.prototype.endWhile = function() {
        return console.log('end while');
      };

      Compiler.prototype.condition = function() {
        return console.log('condtion found');
      };

      Compiler.prototype.assignment = function() {
        return console.log('assignment');
      };

      Compiler.prototype.startIf = function() {
        return console.log('start if');
      };

      Compiler.prototype.endIf = function() {
        return console.log('end if');
      };

      Compiler.prototype.startElse = function() {
        return console.log('start else');
      };

      Compiler.prototype.endElse = function() {
        return console.log('end else');
      };

      Compiler;

      return Compiler;

    })();
    return Compiler;
  };

  if (module) {
    module.exports = init();
  } else {
    define([], init);
  }

}).call(this);
